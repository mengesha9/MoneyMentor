from fastapi import APIRouter, HTTPException
from typing import Dict, Any
import logging

from app.models.schemas import ProgressData
from app.agents.crew import money_mentor_crew
from app.core.database import get_supabase

logger = logging.getLogger(__name__)
router = APIRouter()

@router.get("/user/{user_id}", response_model=ProgressData)
async def get_user_progress(user_id: str):
    """Get comprehensive user progress analysis using CrewAI progress tracker"""
    try:
        # Create progress crew
        progress_crew = money_mentor_crew.create_progress_crew(user_id)
        
        # Execute the crew
        result = progress_crew.kickoff()
        
        # Parse result into ProgressData format
        return ProgressData(**result)
        
    except Exception as e:
        logger.error(f"Progress retrieval failed: {e}")
        raise HTTPException(status_code=500, detail="Failed to get user progress")

@router.get("/analytics/{user_id}")
async def get_learning_analytics(user_id: str):
    """Get detailed learning analytics and insights"""
    try:
        supabase = get_supabase()
        
        # Get quiz performance data from centralized storage
        quiz_data = supabase.table('quiz_responses').select('*').eq('user_id', str(user_id)).execute()
        
        # Get chat interaction data from user_sessions
        chat_data = supabase.table('user_sessions').select('chat_history').eq('user_id', str(user_id)).execute()
        
        # Create progress crew for analysis
        progress_crew = money_mentor_crew.create_progress_crew(user_id)
        analysis = progress_crew.kickoff()
        
        return {
            "user_id": user_id,
            "quiz_performance": quiz_data.data,
            "chat_interactions": sum(len(session.get('chat_history', [])) for session in chat_data.data),
            "ai_analysis": analysis,
            "recommendations": "Generated by AI based on performance patterns"
        }
        
    except Exception as e:
        logger.error(f"Analytics retrieval failed: {e}")
        raise HTTPException(status_code=500, detail="Failed to get learning analytics")

@router.get("/leaderboard")
async def get_leaderboard():
    """Get anonymized leaderboard data"""
    try:
        supabase = get_supabase()
        
        # Get aggregated performance data
        # This would be a more complex query in production
        result = supabase.table('quiz_responses').select('user_id, correct').execute()
        
        # Process leaderboard data (anonymized)
        user_scores = {}
        for response in result.data:
            user_id = response['user_id']
            if user_id not in user_scores:
                user_scores[user_id] = {'correct': 0, 'total': 0}
            
            user_scores[user_id]['total'] += 1
            if response['correct']:
                user_scores[user_id]['correct'] += 1
        
        # Calculate accuracy and create leaderboard
        leaderboard = []
        for i, (user_id, scores) in enumerate(user_scores.items()):
            accuracy = (scores['correct'] / scores['total'] * 100) if scores['total'] > 0 else 0
            leaderboard.append({
                'rank': i + 1,
                'user_id': f"User_{hash(user_id) % 1000}",  # Anonymized
                'accuracy': round(accuracy, 1),
                'total_quizzes': scores['total']
            })
        
        # Sort by accuracy
        leaderboard.sort(key=lambda x: x['accuracy'], reverse=True)
        
        return {
            "leaderboard": leaderboard[:10],  # Top 10
            "total_users": len(user_scores)
        }
        
    except Exception as e:
        logger.error(f"Leaderboard retrieval failed: {e}")
        raise HTTPException(status_code=500, detail="Failed to get leaderboard")

# DISABLED SYNC SERVICES - Export endpoints commented out
# @router.post("/export-all-users")
# async def export_all_user_profiles():
#     """Export all user profiles to Google Sheets UserProfiles tab"""
#     try:
#         from app.services.google_sheets_service import GoogleSheetsService
#         
#         sheets_service = GoogleSheetsService()
#         
#         # Get all user profiles for export
#         user_profiles = await sheets_service.get_all_user_profiles_for_export()
#         
#         if not user_profiles:
#             return {
#                 "success": False,
#                 "message": "No user profiles found to export"
#             }
#         
#         # Export to Google Sheets
#         success = await sheets_service.export_user_profiles_to_sheet(user_profiles)
#         
#         if success:
#             return {
#                 "success": True,
#                 "message": f"Successfully exported {len(user_profiles)} user profiles to Google Sheets",
#                 "exported_count": len(user_profiles),
#                 "sheet_tab": "UserProfiles"
#             }
#         else:
#             return {
#                 "success": False,
#                 "message": "Failed to export user profiles to Google Sheets"
#             }
#         
#     except Exception as e:
#         logger.error(f"User profiles export failed: {e}")
#         raise HTTPException(status_code=500, detail="Failed to export user profiles")

# @router.post("/export/{user_id}")
# async def export_user_data(user_id: str):
#     """Export specific user data for analysis (Google Sheets integration)"""
#     try:
#         from app.services.google_sheets_service import GoogleSheetsService
#         
#         sheets_service = GoogleSheetsService()
#         
#         # Get user profile data
#         supabase = get_supabase()
#         
#         # Get user profile
#         profile_result = supabase.table('user_profiles').select(
#             'user_id, total_chats, quizzes_taken, day_streak, days_active'
#         ).eq('user_id', user_id).single().execute()
#         
#         if not profile_result.data:
#             raise HTTPException(status_code=404, detail="User profile not found")
#         
#         profile = profile_result.data
#         
#         # Get user information
#         user_result = supabase.table('users').select(
#             'first_name, last_name, email'
#         ).eq('id', user_id).single().execute()
#         
#         if not user_result.data:
#             raise HTTPException(status_code=404, detail="User not found")
#         
#         user_info = user_result.data
#         
#         # Prepare user profile for export
#         user_profile = {
#             'user_id': user_id,
#             'first_name': user_info.get('first_name', ''),
#             'last_name': user_info.get('last_name', ''),
#             'email': user_info.get('email', ''),
#             'total_chats': profile.get('total_chats', 0),
#             'quizzes_taken': profile.get('quizzes_taken', 0),
#             'day_streak': profile.get('day_streak', 0),
#             'days_active': profile.get('days_active', 0)
#         }
#         
#         # Export to Google Sheets
#         success = await sheets_service.export_user_profiles_to_sheet([user_profile])
#         
#         if success:
#             return {
#                 "success": True,
#                 "message": f"Successfully exported user profile for {user_info.get('first_name', '')} {user_info.get('last_name', '')}",
#                 "user_profile": user_profile,
#                 "sheet_tab": "UserProfiles"
#             }
#         else:
#             return {
#                 "success": False,
#                 "message": "Failed to export user profile to Google Sheets"
#             }
#         
#     except HTTPException:
#         raise
#     except Exception as e:
#         logger.error(f"User data export failed: {e}")
#         raise HTTPException(status_code=500, detail="Failed to export user data") 